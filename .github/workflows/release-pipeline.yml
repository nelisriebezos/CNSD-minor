name: Release pipeline

on:
  push:
    branches: [ "1.4.2" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B install --file pom.xml

      - name: Code Analysis
        run: |
          mvn sonar:sonar \
          -Dsonar.projectKey=CNSD-minor-NelisRiebezos \
          -Dsonar.host.url=https://sonar.cloud-native-minor.it \
          -Dsonar.login=5e6febbebbd5841356745b865c2c685bb70acb43

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push the Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: account-service
          IMAGE_TAG: v${{ github.run_number }}
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "pushed image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

      - name: Tag the build version
        run: |
          git tag "v${GITHUB_RUN_NUMBER}"
          git push origin "v${GITHUB_RUN_NUMBER}"

#      - name: Deploy container on EC2
#        env:
#          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
#          HOSTNAME: ${{ secrets.EC2_HOST_NAME  }}
#          USER_NAME: ${{ secrets.USER_NAME  }}
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: account-service
#          IMAGE_TAG: v${{ github.run_number }}
#        run: |
#          echo "${PRIVATE_KEY}" > private_key && chmod 600 private_key
#          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} "
#            echo \"Image to deploy: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}\"
#            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}/${ECR_REPOSITORY}
#            docker rm -f account-service
#            docker run -d -p 8080:8080 -e SPRING_PROFILES_ACTIVE=staging --name account-service ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
#          "

#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
#        with:
#          tag_name: v${{ github.run_number }}
#          release_name: v${{ github.run_number }}
#          draft: false
#          prerelease: false
